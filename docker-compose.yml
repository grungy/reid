name: syn
services:
  db:
    build:
      context: ./deploy/config/pgvector
      dockerfile: Dockerfile
    env_file: .env
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./deploy/config/pgvector:/docker-entrypoint-initdb.d
    networks:
      - syn-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U syn -d syndb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  pgadmin:
    image: dpage/pgadmin4
    env_file: .env
    networks:
      - syn-network
    ports:
      - "5050:5050"
    depends_on:
      - db

  minio:
    restart: always
    image: minio/minio:RELEASE.2025-03-12T18-04-18Z-cpuv1
    ports:
        - "9000:9000"
        - "9001:9001"
    command: server /data --console-address ':9001' --address ':9000'
    environment:
        - MINIO_ROOT_USER=${MINIO_ROOT_USER}
        - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    volumes:
        - minio_data:/data
    networks:
      - syn-network

  mc:
        image: minio/mc@sha256:4ccb0c7437bda19ed232603eab10cc246c8f9ac7ccd282943ebb7657a2df4820
        depends_on:
            - minio
        container_name: mc
        environment:
            - AWS_ACCESS_KEY_ID=minioadmin
            - AWS_SECRET_ACCESS_KEY=minioadmin
        entrypoint: >
            /bin/sh -c "
            sleep 10 &&
            /usr/bin/mc alias set minio http://minio:9000 minioadmin minioadmin &&
            /usr/bin/mc mb minio/mlflow;
            /usr/bin/mc policy set public minio/mlflow;
            exit 0;
            "
        networks:
            - syn-network

  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    depends_on:
        mc:
          condition: service_completed_successfully
        db:
          condition: service_healthy
    ports:
        - "5001:5000" # Apple runs Airplay on port 5000
    environment:
        - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
        - AWS_ACCESS_KEY_ID=minioadmin
        - AWS_SECRET_ACCESS_KEY=minioadmin
        - AWS_DEFAULT_REGION=us-east-1
        - MLFLOW_S3_IGNORE_TLS=true
        - AWS_ALLOW_HTTP=true
        - MLFLOW_ENABLE_INSECURE_FAST_LOCAL_ARTIFACT_WRITES=true
        - MLFLOW_S3_BUCKET_NAME=mlflow
    command: bash -c "python3 -m pip install pip --upgrade && \
      python3 -m pip install psycopg2-binary boto3==1.34.* && \
      mlflow server --backend-store-uri postgresql://syn:test123@db:5432/syndb --default-artifact-root s3://mlflow/ --host 0.0.0.0"
    networks:
      - syn-network
  milvus:
    # container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.6-20250308-ed71932c-arm64
    command: ["milvus", "run", "standalone"]
    environment:
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    # volumes:
    #   - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
    depends_on:
      - "etcd"
      - "minio"
    networks:
      - syn-network

  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.0
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
    # volumes:
    #   - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    networks:
      - syn-network
  attu:
    container_name: milvus-attu
    image: zilliz/attu:v2.4
    environment:
      MILVUS_URL: milvus:19530
    ports:
      - "8001:3000"
    depends_on:
      - "milvus"
    networks:
      - syn-network

networks:
  syn-network:
    driver: bridge

volumes:
  db_data:
  minio_data:
  milvus_data:
  etcd_data:
  mlflow_data:
